1)Does your program output any garbage? If yes, why?

	The program prints the input prompt of the xinu shell 'xsh $' in the program output. The following is a snippet of the output containing this garbage value:


xsh $ prodcons 20
produced : 1
produced : 2
proconsumed : 3
xsh $ dconsumuced :ed 3
p :roduce 3d
consume: 4
produd : 4
.
.
.


This could be because the input prompt 'xsh $' resides in the output buffer and gets printed as soon as the calling/parent function quits executing.
The parent function, 'xsh_prodcons' creates the two children and terminates as there is nothing left to do. The children functions contain time consuming processes such as print statements and for loops.
This could also be why the input buffer appears in the output earlier on, ie., in the first five lines or so.


2)Are all the produced values getting consumed?

	Below is the output obtained for count=20:

xsh $ prodcons 20
produced : 1
produced : 2
proconsumed : 3
xsh $ dconsumuced :ed 3
p :roduce 3d
consume: 4
produd : 4
consced : 5
proumed : duced : 6
produ5
consced umed : 7
: consum7
produced : ed : 7
8
produced : 9
pconsumed : 10
roduced : 10
produced : 11
prodconsumed :uced : 12 1
pr2
codonsumed : uce13
consumd : 1ed : 13
consume3
produced d : 13
co: 14
producensumed d : 15
p: 14
conroducsumed : ed : 16
16
consumed : 16
consproduced : 17
produmed : 16
consumed uced : 18
pr: 18
conoducsumed : 19
ed : 19
produceconsumed : 20
d : 20
consumed : 20
consumed : 20	
	
As seen in the output, not all values are consumed. Eg: values 1,2,6, etc.
Xinu uses Round-Robin Scheduling where processes with equal priorities are each given a specific amount of time to execute before they are preemempted  to move on to the next process in the priority set. This way, each process executes atleast once before the next round of execution begins.
So a certain number of iterations would have occured in the producer function before it gets preemepted. When its the consumer's turn, since 'n' is a global variable, it would have skipped certain 'n' values and only prints the latest value. Conversly, certain 'n' values can get printed more than once if the consumer function isn't preempted after each iteration.
However, since the consumer has to print 'n' number of times, this could mean once consumer prints 'count' number of times, it will finish executing irrespective of value of 'n'. This explains the trailing 20's in the above ouput example.

FUNCTION DEFINITIONS:

Below are the codes for producer and consumer functions. 
Producer function produces values for the global variable 'n'. Each value is produced within a for loop running 'count' number of times.
The consumer function is expected to consume these produced values. So, the consumed value is printed 'count' number of times using a for loop; each value corrsponding to the different values of 'n'.

xinu@89b5b3b4d44c:~/data/xinu-S20/apps$ cat consume.c
#include <xinu.h>
#include <prodcons.h>

void consumer(int count) {
        for (int i =1; i<=count; i++){
                printf("consumed : %d\n",n);

        }
}

xinu@89b5b3b4d44c:~/data/xinu-S20/apps$ cat produce.c
#include <xinu.h>
#include <prodcons.h>

void producer(int count) {
        for (int i =1; i<=count; i++){
                n=i;
                printf("produced : %d\n",n);
        }
}

The xsh_prodcons function implements the shell command. It is the parent function and creates the two children; producer and consumer.
Below is the function definition:
xinu@89b5b3b4d44c:~/data/xinu-S20/shell$ cat xsh_prodcons.c
#include <xinu.h>
#include <prodcons.h>
#include <stdlib.h>

int n;                 //Definition for global variable 'n'
/*Now global variable n will be on Heap so it is accessible all the processes i.e. consume and produce*/

shellcmd xsh_prodcons(int nargs, char *args[])
{
          //Argument verifications and validations
          int count = 2000;             //local varible to hold count
          //
          ////check args[1] if present assign value to count
          if (nargs>2)
          {
              printf("Only a maximum of one argument allowed\n");
              return (1);
           }
          if (nargs==2){
                  count=atoi(args[1]);
          }
          ///create the process producer and consumer and put them in ready queue.
          ////Look at the definations of function create and resume in the system folder for reference.
          resume( create(producer, 1024, 20, "producer", 1, count));
          resume( create(consumer, 1024, 20, "consumer", 1, count));
          return (0);
}
